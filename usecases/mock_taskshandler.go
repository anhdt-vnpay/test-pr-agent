// Code generated by mockery v2.46.1. DO NOT EDIT.

package usecases

import (
	common "github.com/blcvn/corev4-explorer/common"
	mock "github.com/stretchr/testify/mock"
)

// MockTasksHandler is an autogenerated mock type for the tasksHandler type
type MockTasksHandler struct {
	mock.Mock
}

type MockTasksHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTasksHandler) EXPECT() *MockTasksHandler_Expecter {
	return &MockTasksHandler_Expecter{mock: &_m.Mock}
}

// PerformTasks provides a mock function with given fields: taskId, tasksType
func (_m *MockTasksHandler) PerformTasks(taskId int64, tasksType int32) common.BaseError {
	ret := _m.Called(taskId, tasksType)

	if len(ret) == 0 {
		panic("no return value specified for PerformTasks")
	}

	var r0 common.BaseError
	if rf, ok := ret.Get(0).(func(int64, int32) common.BaseError); ok {
		r0 = rf(taskId, tasksType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.BaseError)
		}
	}

	return r0
}

// MockTasksHandler_PerformTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformTasks'
type MockTasksHandler_PerformTasks_Call struct {
	*mock.Call
}

// PerformTasks is a helper method to define mock.On call
//   - taskId int64
//   - tasksType int32
func (_e *MockTasksHandler_Expecter) PerformTasks(taskId interface{}, tasksType interface{}) *MockTasksHandler_PerformTasks_Call {
	return &MockTasksHandler_PerformTasks_Call{Call: _e.mock.On("PerformTasks", taskId, tasksType)}
}

func (_c *MockTasksHandler_PerformTasks_Call) Run(run func(taskId int64, tasksType int32)) *MockTasksHandler_PerformTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int32))
	})
	return _c
}

func (_c *MockTasksHandler_PerformTasks_Call) Return(_a0 common.BaseError) *MockTasksHandler_PerformTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTasksHandler_PerformTasks_Call) RunAndReturn(run func(int64, int32) common.BaseError) *MockTasksHandler_PerformTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTasksHandler creates a new instance of MockTasksHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTasksHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTasksHandler {
	mock := &MockTasksHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
